var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[153.01014252222362, -26.6141012399702],
          [153.01014252222362, -26.66995169575863],
          [153.07777710474315, -26.66995169575863],
          [153.07777710474315, -26.6141012399702]]], null, false);



var roi = geometry;
Map.centerObject(roi);
//Map.addLayer(roi,{'color':'grey'},'roi');

var roiStyle = {
  color: 'black',      // 黑色边界线
  fillColor: '00000000', // 透明填充
  width: 2             // 边界线宽度
};

// 添加带样式的 roi 到地图
Map.addLayer(roi, roiStyle, 'Styled ROI');

/***************************************************************************************
 *model's parameters 
***************************************************************************************/

var conv1_weight = ee.List()
var conv1_bias = ee.List()

var conv2_weight = ee.List()
var conv2_bias = ee.List()

var conv3_weight = ee.List()
var conv3_bias = ee.List()

var conv4_weight = ee.List()
var conv4_bias = ee.List()

var conv5_weight = ee.List([[[[0.029]], [[0.055]], [[0.075]], [[-0.050]], [[-0.113]], [[0.095]], [[0.027]], [[0.067]], [[0.215]], [[-0.159]], [[0.026]], [[0.116]], [[0.061]], [[-0.148]], [[-0.068]], [[-0.04332266375422478]], [[-0.1331150084733963]], [[-0.020399635657668114]], [[-0.08456649631261826]], [[0.03644039109349251]], [[0.08861946314573288]], [[0.1665755808353424]], [[0.047320954501628876]], [[-0.08703121542930603]], [[-0.015231185592710972]], [[0.14160360395908356]], [[0.04610791057348251]], [[0.05954702943563461]], [[-0.07641586661338806]], [[0.17005132138729095]], [[0.03732772916555405]], [[-0.06207260116934776]], [[0.08880298584699631]], [[0.05665929242968559]], [[0.06068494915962219]], [[0.017160475254058838]], [[-0.03437579423189163]], [[-0.03098398633301258]], [[-0.03157244995236397]], [[0.028467146679759026]], [[0.01686345785856247]], [[0.02258627489209175]], [[-0.17067387700080872]], [[-0.13269191980361938]], [[-0.012954345904290676]], [[0.17546653747558594]], [[0.1729070246219635]], [[-0.2107657790184021]], [[0.037126973271369934]], [[-0.07916666567325592]], [[-0.07156111299991608]], [[0.12448574602603912]], [[0.014291121624410152]], [[0.19065779447555542]], [[-0.08670377731323242]], [[0.0069980742409825325]], [[-0.08303828537464142]], [[0.06845369189977646]], [[0.004633015487343073]], [[0.15350046753883362]], [[0.09962227195501328]], [[-0.05248201638460159]], [[0.07996945828199387]], [[0.15031681954860687]], [[-0.05138922110199928]], [[0.09427498281002045]], [[0.12094758450984955]], [[-0.08776473253965378]], [[-0.10992777347564697]], [[-0.06541702896356583]], [[-0.07913359999656677]], [[-0.014844943769276142]], [[0.05813999101519585]], [[-0.13415859639644623]], [[0.06886737793684006]], [[0.003364474745467305]], [[0.027459099888801575]], [[-0.04116978496313095]], [[0.1351490318775177]], [[0.13674812018871307]], [[0.04467058181762695]], [[-0.2075982689857483]], [[-0.055366937071084976]], [[-0.09010202437639236]], [[0.08354698866605759]], [[-0.03333668410778046]], [[-0.07737072557210922]], [[-0.06165355443954468]], [[0.04364990070462227]], [[0.01451072096824646]], [[-0.033643145114183426]], [[0.05894327908754349]], [[-0.0657101422548294]], [[0.0669097974896431]], [[0.0319441556930542]], [[-0.1001734659075737]], [[-0.09954975545406342]], [[0.08970315009355545]], [[0.26251286268234253]], [[-0.16425776481628418]], [[-0.06924425810575485]], [[-0.16911494731903076]], [[-0.03897015377879143]], [[0.0820489153265953]], [[0.11065718531608582]], [[0.17847341299057007]], [[-0.03923634812235832]], [[-0.041375067085027695]], [[0.05874061584472656]], [[0.05224602669477463]], [[0.06349443644285202]], [[-0.043096691370010376]], [[0.10552246868610382]], [[0.10552043467760086]], [[-0.0335514098405838]], [[0.11436037719249725]], [[0.21569079160690308]], [[-0.021361231803894043]], [[-0.10938940942287445]], [[-0.2390405833721161]], [[0.11290030181407928]], [[-0.1353081911802292]], [[-0.20939697325229645]], [[0.06465035676956177]], [[0.01958800107240677]], [[0.19875268638134003]], [[-0.0739399641752243]], [[-0.049790527671575546]]], [[[-0.023628078401088715]], [[0.05813409760594368]], [[-0.1299034059047699]], [[-0.07615865021944046]], [[0.007180007640272379]], [[-0.10244441777467728]], [[0.08886579424142838]], [[0.030410459265112877]], [[-0.18711403012275696]], [[0.07351557910442352]], [[-0.0019531724974513054]], [[-0.08366912603378296]], [[-0.13095606863498688]], [[0.19457396864891052]], [[-0.05878168344497681]], [[0.0957777351140976]], [[0.0630425363779068]], [[-0.10690389573574066]], [[-0.03952217102050781]], [[-0.04046459123492241]], [[-0.16138264536857605]], [[-0.18261085450649261]], [[-0.0040145814418792725]], [[-0.047346584498882294]], [[0.055079180747270584]], [[-0.14728061854839325]], [[-0.07572928816080093]], [[0.05818667262792587]], [[-0.05833809822797775]], [[-0.10947582125663757]], [[-0.07207228988409042]], [[-0.08526766300201416]], [[-0.0261865071952343]], [[0.0222364142537117]], [[-0.00446833111345768]], [[0.06989624351263046]], [[-0.0019993886817246675]], [[-0.0704524964094162]], [[-0.1185724064707756]], [[0.07122852653265]], [[-0.05237458273768425]], [[0.07887838780879974]], [[0.10857489705085754]], [[0.13970239460468292]], [[-0.011697939597070217]], [[-0.1707395762205124]], [[-0.19379399716854095]], [[0.28635984659194946]], [[-0.07639560103416443]], [[0.12608858942985535]], [[0.010997147299349308]], [[-0.10139524936676025]], [[-0.023155590519309044]], [[-0.061127446591854095]], [[0.06745276600122452]], [[-0.07391680777072906]], [[-0.013125676661729813]], [[0.0300091952085495]], [[0.08186274766921997]], [[-0.19551728665828705]], [[-0.007811299059540033]], [[-0.012348892167210579]], [[-0.18024952709674835]], [[-0.05597947910428047]], [[-0.07403449714183807]], [[-0.07802806049585342]], [[-0.11129983514547348]], [[-0.026348480954766273]], [[0.043692078441381454]], [[-0.07889360189437866]], [[0.07653331011533737]], [[-0.08261176198720932]], [[0.02419760823249817]], [[0.17003989219665527]], [[-0.02273375168442726]], [[0.0012802736600860953]], [[-0.12173515558242798]], [[-0.058186136186122894]], [[0.005439682863652706]], [[-0.16301409900188446]], [[0.06344606727361679]], [[0.05340883135795593]], [[-0.03640583157539368]], [[0.14887823164463043]], [[0.021911581978201866]], [[-0.11941344290971756]], [[-0.0315384715795517]], [[0.05180405080318451]], [[-0.0047447336837649345]], [[0.0744403675198555]], [[-0.08708736300468445]], [[0.023444965481758118]], [[-0.08741425722837448]], [[-0.03886397182941437]], [[-0.10228469967842102]], [[0.07105368375778198]], [[0.08954846113920212]], [[-0.08033707737922668]], [[-0.23447950184345245]], [[0.037222009152173996]], [[0.0707474872469902]], [[0.11126675456762314]], [[0.0267237089574337]], [[-0.010375065729022026]], [[-0.009368432685732841]], [[-0.1338593065738678]], [[0.16644270718097687]], [[0.03430139645934105]], [[-0.04960907623171806]], [[-0.04301206395030022]], [[-0.054327718913555145]], [[0.07727210968732834]], [[-0.11275291442871094]], [[-0.05844052881002426]], [[-0.016652196645736694]], [[-0.061692409217357635]], [[-0.21993084251880646]], [[-0.02967127412557602]], [[0.1570071280002594]], [[0.21045304834842682]], [[-0.10336162894964218]], [[0.07793909311294556]], [[0.149858757853508]], [[0.06238842010498047]], [[0.06031762808561325]], [[-0.17029404640197754]], [[-0.020985737442970276]], [[0.07255009561777115]]]])
var conv5_bias = ee.List([-0.294, 0.254])
/***************************************************************************************
 *Sentinel-2 image Check
***************************************************************************************/
var year = 2022;
var start = year +'-09-23';
var end =  year +'-10-10';
var dataRage = ee.DateRange(start, end);
var s2 = "COPERNICUS/S2_SR_HARMONIZED";
var indexs = ['NDVI', 'EVI', 'LSWI', 'MNDVI'];
var s2ImageCol = getS2ImageCol(roi, s2, dataRage);
s2ImageCol = s2ImageCol.mean().clip(roi);
Map.addLayer(s2ImageCol, {'min': 0.0, 'max': 0.3, 'bands': ['B4', 'B3', 'B2'],}, 's2');

/***************************************************************************************
 * CNN model deployment
***************************************************************************************/
var conv1_result = applyConvolutionWithBias(s2ImageCol,conv1_weight, conv1_bias, true);
conv1_result = conv1_result.clip(roi);

var conv2_result = applyConvolutionWithBias(conv1_result, conv2_weight, conv2_bias, true);
conv2_result = conv2_result.clip(roi);
conv2_result = conv2_result.addBands(s2ImageCol).clip(roi);

var conv3_result = applyConvolutionWithBias(conv2_result, conv3_weight, conv3_bias, true);
conv3_result = conv3_result.clip(roi);
conv3_result = conv3_result.addBands(s2ImageCol).clip(roi);

var conv4_result = applyConvolutionWithBias(conv3_result, conv4_weight, conv4_bias, true);
conv4_result = conv4_result.clip(roi);

var conv5_result = applyConvolutionWithBias(conv4_result, conv5_weight, conv5_bias, false);
conv5_result = conv5_result.clip(roi);

conv5_result = conv5_result.expression(
  "i1 > i2 ? 0 : 1",
  {
    i1: conv5_result.select(0), // First band
    i2: conv5_result.select(1)  // Second band
  }
);
var s2mask = ee.ImageCollection(s2).filterBounds(roi).filterDate(dataRage).map(rmCloudByQA).map(addAlb).median()
var conv5_result = conv5_result.updateMask(s2mask.select('Alb').gte(0.4));
//Map.addLayer(conv5_result.clip(roi).selfMask(),{'palette':'red'}, 'CNN_Water');

function applyConvolutionWithBias(image, conv_weights, conv_biases, useBoolean) {
  var convolvedImages = ee.List.sequence(0, conv_weights.length().subtract(1)).map(function (index){
    var convolvedBands = image.bandNames().map(function(bandName) {
      var bandIndex = image.bandNames().indexOf(bandName);
      var kernel = ee.Kernel.fixed(-1, -1, ee.List(conv_weights.get(index)).get(bandIndex));
      var convolvedBand = image.select([bandName]).convolve(kernel);
      return convolvedBand.rename(['random']);
    });
    var sumWithBias = ee.ImageCollection.fromImages(convolvedBands).reduce(ee.Reducer.sum()).add(ee.Number(conv_biases.get(index)));
    return sumWithBias;
  });
  var combinedImage = ee.ImageCollection(convolvedImages).toBands();
  if (useBoolean) {
    return combinedImage.updateMask(combinedImage.gte(0)).unmask(0);
  } else {
    return combinedImage;
  }
}

function reScale(image){
    return image.divide(10000);
}

function rmCloudByQA(image){
    var qa = image.select('QA60');
    var cloudBitMask = 1 << 10;
    var cirrusBitMask = 1 << 11;
    var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(qa.bitwiseAnd(cirrusBitMask).eq(0));
    var mask2 = image.select("B2").lt(2000);
    return image.updateMask(mask).updateMask(mask2);
}

// Function to calculate NDSI
function addNDSI(image) {
  var ndsi = image.normalizedDifference(['B3', 'B11']).rename('NDSI');
  return image.addBands(ndsi);
}

// Function to calculate NDWI
function addNDWI(image) {
  var ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI');
  return image.addBands(ndwi);
}

//  Function to calculate Alb
function addAlb(image) {
  var alb = image.select('B2').multiply(0.2266)
            .add(image.select('B3').multiply(0.1236))
            .add(image.select('B4').multiply(0.1573))
            .add(image.select('B8').multiply(0.3417))
            .add(image.select('B11').multiply(0.117))
            .add(image.select('B12').multiply(0.0338));
  return image.addBands(alb.rename('Alb'));
}

function getS2ImageCol(roi, s2, dataRange){
  var s2Col = ee.ImageCollection(s2)
           .filterBounds(roi)
           .filterDate(dataRage)
           .map(rmCloudByQA)
           .map(addNDSI)
           .map(addNDWI)
           .map(addAlb)
           .map(function(image) {
             return image.updateMask(image.select('Alb').gte(0.4));
           })
           .select(["B2", "B3", "B4", "B5", "B6", "B7", "B8", "B8A", "B11", "B12", "Alb"])
           .map(reScale);
  return s2Col;
}

Map.addLayer(conv5_result.clip(roi).selfMask(),{'palette':'red'}, 'CNN_Water');
